<?php

/**
 * Implements hook_views_api
 */
function dfc_points_views_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'dfc_points_views'),
  );
}
function dfc_points_views_views_pre_render(&$view) {
  if($view->name == 'leaderboards' || $view->name == 'user_ranking'){
    $label = str_replace('Monthly', date('F'), $view->field['monthly_points']->options['label']);
    $view->field['monthly_points']->options['label'] = $label;
  }
  if($view->name == 'user_ranking'){
    if(!empty($view->result)){
      if(empty($view->result[0]->userpoints_monthly_points)){
        if ( isset( $view->result[0]->userpoints_max_monthly_standing ) ) {
          $view->result[0]->userpoints_monthly_standing = $view->result[0]->userpoints_max_monthly_standing;
        }
      }
      if(empty($view->result[0]->userpoints_lifetime_points)){
        if ( isset( $view->result[0]->userpoints_max_lifetime_standing ) ) {
          $view->result[0]->userpoints_lifetime_standing = $view->result[0]->userpoints_max_lifetime_standing;
        }
      }
    }
  }
}

function dfc_points_views_views_query_alter(&$view, &$query) {
  global $user;
  
  if ($view->name == 'user_ranking'){
    //watchdog('userank', 'view exposed data : <pre>'. print_r($view->exposed_data,true) .'</pre>');
    $filteruid = true;
    if ( isset( $view->exposed_data ) ) {
      if ( isset( $view->exposed_data['combine'] ) ) {
        if ( $view->exposed_data['combine'] !== '' ) {
          $filteruid = false;
        }
      }
    }
    if( $filteruid ){
      if ( $user->uid > 0 ) {
        $query->where[1]['conditions'][] = array('field' => 'users.uid', 'value' => array($user->uid), 'operator' => 'in');
        $view->exposed_data['uid'] = $user->uid;
      }
    }
  }
}

function dfc_points_views_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    if ( in_array( $form['#id'] , array( 'views-exposed-form-user-ranking-block-1', 'views-exposed-form-user-ranking-block-3' ) ) ) {
      // replace
      unset( $form['#info']['filter-combine'] );
      $form['combine']['#description'] = '';
      $form['combine']['#attributes']['placeholder'] = t('Enter name to check ranking');
    }
    if ( $form['#id'] == 'views-exposed-form-resorts-block' ) {
      $form['combine']['#attributes']['placeholder'] = t('Enter City or Country');
    }
  }
  if ( $form_id == 'commerce_checkout_form_checkout' ) {
    // fix points discount errors..
    if ( isset( $form['commerce_userpoints_discount'] ) ) {
      // first, correct the math for any points that might get exchanged there
      variable_set('commerce_userpoints_discount_royalties_multiple', 0.3);
      
      // remove points discount "exchange" note programmatically
      if ( isset( $form['commerce_userpoints_discount']['info'] ) ) {
        if ( isset( $form['commerce_userpoints_discount']['info']['exchange'] ) ) {
          unset( $form['commerce_userpoints_discount']['info']['exchange'] );
        }
      }
      // check current user's points
      global $user;
      $lifetime_points = userpoints_get_current_points($user->uid, 0);
      // clean up "amount" logic a bit
      if ( isset( $form['commerce_userpoints_discount']['amount'] ) ) {
        // the AMOUNT actually is not converted so first reconvert
        $amount = $form['commerce_userpoints_discount']['amount']['#default_value'];
        if ( function_exists('dfc_points_award_get_points_conversion') ) {
          $amount = dfc_points_award_get_points_conversion( $amount );
          $form['commerce_userpoints_discount']['amount']['#default_value'] = $amount;
        }
        // then update description
        $form['commerce_userpoints_discount']['amount']['#description'] = number_format( $amount ) .' Points will pay this order in full.';
        
        // check if no points then disable some other stuff
        if ( $lifetime_points == 0 ) {
          // disable?
          if ( !isset( $form['commerce_userpoints_discount']['amount']['#attributes'] ) ) {
            $form['commerce_userpoints_discount']['amount']['#attributes'] = array();
          }
          $form['commerce_userpoints_discount']['amount']['#attributes']['disabled'] = true;
          // also disable submit btn
          if ( isset( $form['commerce_userpoints_discount']['cup_submit'] ) ) {
            if ( !isset( $form['commerce_userpoints_discount']['cup_submit']['#attributes'] ) ) {
              $form['commerce_userpoints_discount']['cup_submit']['#attributes'] = array();
            }
            $form['commerce_userpoints_discount']['cup_submit']['#attributes']['disabled'] = true;
          }
        }
      }
    }
  }
  //watchdog('dfalt', 'dfc_points_views_form_alter : '. $form_id .' <pre>'. print_r($form,true) .'</pre>');
}

/*
 * hook_userpoints_list_transactions_alter
 * to remove unwanted columns from /user/#/points via the drupal_alter('userpoints_list_transactions', $output);
 */
function dfc_points_views_userpoints_list_transactions_alter( &$data ) {
	// remove Status + Actions columns
	$remove = array(4,5);
	foreach ( $remove as $r ) {
		unset($data['list']['table']['#header'][$r]);
	}
  // loop through each table row
	foreach ( $data['list']['table']['#rows'] as $k => $v ) {
		foreach ( $remove as $r ) {
      // remove that column of data
			unset($data['list']['table']['#rows'][$k]['data'][$r]);
		}
	}
  
  // override "Approved Points" and "Pending Points" in the summary table
  $lifetime_points = userpoints_get_current_points($data['#account']->uid, 0);
  $monthly_points = userpoints_get_current_points($data['#account']->uid, 1);
  $data['list']['summary_table']['#rows'] = array(
    array(
      'data' => array(date('F') .' '. t('!points', userpoints_translation()), $monthly_points),
      'class' => array('userpoints-myuserpoints-total-approved'),
    ),
    array(
      'data' => array(t('Lifetime !points', userpoints_translation()), $lifetime_points),
      'class' => array('userpoints-myuserpoints-total-pending'),
    ),
  );
}
