<?php

function dfc_points_award_menu() {
  $items['dfc/points/grant/video/%/%'] = array(
    'page callback' => 'dfc_points_award_video',
    'page arguments' => array(4, 5),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['dfc/points/grant/link'] = array(
    'page callback' => 'dfc_points_award_link',
    //'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  /*
  // Returns AJAX commands if the user has JavaScript turned on.
  $items['dfc/points/award/ajax'] = array(
    'title' => 'My custom ajax callback',
    'page callback' => 'dfc_points_award_ajax_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // Returns a Non-JavaScript alternative.
  $items['dfc/points/award/nojs'] = array(
    'title' => 'My custom non-javascript callback',
    'page callback' => 'dfc_points_award_nojs_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // The page that will run the command.
  $items['dfc/points/award/trigger-page'] = array(
    'title' => 'AJAX trigger page',
    'page callback' => 'dfc_points_award_trigger_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  */
  return $items;
}

function dfc_points_award_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $role = is_array($user->roles) && in_array('administrator', $user->roles);

  if ($form_id == 'invite_form') {
    $form['#validate'][] = 'dfc_points_award_grant_points_invite_form_validate';
    $form['#submit'][] = 'dfc_points_award_grant_points_invite_form';
    $form['actions']['submit']['#submit'][] = 'dfc_points_award_grant_points_invite_form';
  } else if ($form_id == 'user_profile_form') {

  }
}

function dfc_points_award_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'media_item') {
    $cat = $node->field_media_category[LANGUAGE_NONE][0]['tid'];
    // set up our custom JS for triggering points for watching a video
    $threshold = 21 * 60;
    if ($cat == 17) {
      //advertisement
      $threshold = 30;
    } else if ($cat == 6) {
      //sponsored video
      $threshold = 60 * 2;
    }
    $settings['dfcPointsAward']['awarded'] = dfc_points_award_check_video_awarded($node->nid);
    $settings['dfcPointsAward']['threshold'] = $threshold;
    $settings['dfcPointsAward']['vid'] = $node->nid;
    $settings['dfcPointsAward']['vcode'] = dfc_points_award_get_random_string();
    drupal_add_js($settings, 'setting');
    drupal_add_js(drupal_get_path('module', 'dfc_points_award') . '/js/award_video.js');
    /*
    // also inject html after the ShareThis buttons
    // First get all of the options for the sharethis widget from the database:
    $data_options = sharethis_get_options_array();

    // Get the full path to insert into the Share Buttons.
    $mPath = url('node/' . $node->nid, array('absolute' => TRUE));
    $mTitle = $node->title;

  
    $enabled_types = $data_options['sharethis_node_types'];
    if (isset($enabled_types[$node->type]) && $enabled_types[$node->type] === $node->type) {
      $node->content['thensharethiscatch'] = array(
        '#tag' => 'div', // Wrap it in a div?
        '#type' => 'html_tag',
        '#attributes' => array('class' => 'sharethis-buttons also'),
        '#value' => dfc_points_award_trigger_page(),
        '#weight' => intval(variable_get('sharethis_weight', 10)) + 1,
      );
    }
    */
  }
}

function dfc_points_award_preprocess_views_view_field(&$vars) {
  $view = $vars['view'];
  $field = &$vars['field'];
  $row = $vars['row'];
  if($view->name == 'media_items' && $view->current_display == 'block' && $field->field == 'nothing') {
    $cat = $row->_field_data['nid']['entity']->field_media_category[LANGUAGE_NONE][0]['tid'];
    $points = dfc_points_award_points_by_cat($cat);
    $vars['output'] = "<span class='pts-value'>{$points}</span> Points";
  }
  //display store items in points?
//  if($view->name == 'store' && $field->field == 'commerce_price') {
//    $points = $row->field_commerce_price[0]['raw']['amount'];
//    $vars['output'] = "<span class='pts-value'>{$points}</span> Points";
//  }
}

function dfc_points_award_video ($vid, $time) {
  $ret = array('success' => FALSE);
  $node = node_load($vid);
  $cat = $node->field_media_category[LANGUAGE_NONE][0]['tid'];

  $points = dfc_points_award_points_by_cat($cat);
  if(!dfc_points_award_check_video_awarded($vid)) {
    $video_points = array(
        'points' => $points,
        'entity_type' => 'node',
        'entity_id' => $vid,
    );
    dfc_points_award_grant_points($video_points);
    watchdog('dfc', 'awarding video points');
    $ret['success'] = TRUE;
  }

  drupal_json_output($ret);
}

function dfc_points_award_points_by_cat($cat) {
  //cat 4 and 7 are most used, and both default to 20 pts
  $points = 20;
  if ($cat == 17) {
    //advertisement
    $points = 5;
  } else if ($cat == 6) {
    //sponsored video
    $points = 10;
  }

  return $points;
}

function dfc_points_award_check_video_awarded($vid) {
  global $user;
  $chk = db_select('userpoints_txn', 'upt')
      ->fields('upt')
      ->condition('uid', $user->uid)
      ->condition('entity_type', 'node')
      ->condition('entity_id', $vid)
      ->execute()->fetchAssoc();

  if($chk) {
    return TRUE;
  }
  return FALSE;
}

function dfc_points_award_link () {
  if ($l = $_GET['l']) {
    $ls = substr($l, 128);
    global $user;
    //@todo verify url validity, don't grant points for just any url
    $chk = db_select('userpoints_txn', 'upt')
        ->fields('upt')
        ->condition('uid', $user->uid)
        ->condition('reference', $ls)
        ->execute()->fetchAssoc();

    if(!$chk) {
      $link_points = array(
        'points' => 10,
        'reference' => $ls
      );
      dfc_points_award_grant_points($link_points);
      watchdog('dfc', 'awarding link points: ' . $l);
    }
    drupal_goto($l);
  }
}

function dfc_points_award_grant_points_invite_form_validate(&$form, &$form_state) {
  global $user;
  $max_invites = 10;
  $num = sizeof(db_select('invite', 'i')->fields('i')->condition('uid', $user->uid)->execute()->fetchALLAssoc('iid'));
  if($num > $max_invites) {
    form_set_error('invitation_email_address', "You've already invited your maximum of {$max_invites} people");
    return FALSE;
  }

  return TRUE;
}

function dfc_points_award_grant_points_invite_form(&$form, &$form_state) {
  $invite_points = 10;
  dfc_points_award_grant_points($invite_points);
  $form_state['redirect'] = '/user';
}

function dfc_points_award_grant_points($points) {
  //earned points go to monthly category
  if (!is_array($points)) {
    $pts = $points;
    $points = array('points' => $points);
  }
  $points['tid'] = 1;

  userpoints_userpointsapi($points);
}

function dfc_points_award_grant_points_upload(&$form, &$form_state) {
  global $user;
  $u = user_load($user->uid);

  if($form_state['values']['field_user_images']) {
    $imgs_num_u = isset($u->field_user_images[LANGUAGE_NONE]) ? sizeof($u->field_user_images[LANGUAGE_NONE]) : 0;
    $imgs_num_f = sizeof($form_state['values']['field_user_images'][LANGUAGE_NONE]);

    if ($form_state['values']['field_user_images'][LANGUAGE_NONE][0]['fid'] == 0) {
      $imgs_num_f--;
    }

    if ($imgs_num_f > $imgs_num_u) {
      //new upload, award points
      dfc_points_award_grant_points(10);
    }
  }
}

function dfc_points_award_rules_condition_info() {
  return array(
    'dfc_points_award_condition_check_refer' => array(
      'label' => t('Check if user was referred'),
      'arguments' => array(
        'user' => array('type' => 'user', 'label' => t('User Signing Up')),
      ),
      'group' => t('DFC'),
    ),
    'dfc_points_award_condition_check_refer' => array(
      'label' => t('Check if user was referred'),
      'arguments' => array(
        'user' => array('type' => 'user', 'label' => t('User Signing Up')),
      ),
      'group' => t('DFC'),
    ),
  );
}

function dfc_points_award_rules_action_info() {
  return array(
    'dfc_points_award_action_load_invite_user' => array(
      'label' => t('Load inviting user'),
      'arguments' => array(
          'user' => array('type' => 'user', 'label' => t('User Signing Up')),
      ),
      'new variables' => array(
        'invite_user' => array(
          'type' => 'user',
          'label' => t('Invite User'),
          'save' => TRUE,
        ),
      ),
      'group' => t('DFC'),
    )
  );
}

function dfc_points_award_condition_check_refer($user) {
  if(dfc_points_award_action_load_invite_user($user)) {
    return TRUE;
  }
  return FALSE;
}

function dfc_points_award_action_load_invite_user($user) {
  $invite = db_select('invite', 'i')
    ->fields('i')
    ->condition('invitee', $user->uid)
    ->execute()
    ->fetchAssoc();

  if ($invite->uid) {
    $invite_user = user_load($invite->uid);
    if ($invite_user) {
      return array('user' => $invite_user);
    }
  }
  return FALSE;
}

function dfc_points_award_get_random_string($length = 10) {
  $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  $charactersLength = strlen($characters);
  $randomString = '';
  for ($i = 0; $i < $length; $i++) {
    $randomString .= $characters[rand(0, $charactersLength - 1)];
  }
  return $randomString;
}
/*
function dfc_points_award_trigger_page() {
  // Load in Drupal core AJAX library.
  drupal_add_library('system', 'drupal.ajax');
 
  // Load in our custom JavaScript.
  drupal_add_js(drupal_get_path('module', 'dfc_points_award') . '/js/ajaxtest.js');
 
  // Present the user with a link with the id 'my-special-link'.
  $oot = l('Get share points', 'dfc/points/award/nojs', array(
    'attributes' => array(
      'id' => 'my-special-link',
      'class' => array( 'button' )
    )
  ));
  
  $oot .= ' '. l('Another trigger chain', '', array(
    'attributes' => array(
      'class' => array( 'button', 'triggererd' )
    )
  ));
  
  return $oot;
}

// AJAX callback that prints hello world underneath our link.
function dfc_points_award_ajax_callback() {
  // Define a new array to hold our AJAX commands.
  $ajax_commands = array();
  
  // Create a new AJAX command that replaces the #page text with our own text.
  $ajax_commands[] = ajax_command_after('#my-special-link', 'You have earned 5 Points?');
   
  // Return our commands in JSON.
  ajax_deliver(array('#type' => 'ajax', '#commands' => $ajax_commands));
}

// Non-JavaScript callback that returns whatever
function dfc_points_award_nojs_callback() {
  return 'You have earned 5 Points?';
}
*/